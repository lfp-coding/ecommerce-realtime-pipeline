name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit checks
        run: pre-commit run --all-files

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests and generate HTML report
        run: pytest tests/unit --html=unit-test-report.html

      - name: Upload unit test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: unit-test-report.html

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare env file
        run: |
          cp .env.example .env

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Start stack with docker-compose and test container
        run: |
          docker-compose -f docker-compose.yaml -f docker-compose.ci.yaml up -d

      - name: Wait for services to be healthy
        run: |
          set -e
          TIMEOUT=180
          INTERVAL=2
          for ((i=0; i<$TIMEOUT; i+=$INTERVAL)); do
            unhealthy=$(docker ps --filter "health=unhealthy" --format "{{.Names}}")
            starting=$(docker ps --filter "health=starting" --format "{{.Names}}")
            if [[ -z "$unhealthy" && -z "$starting" ]]; then
              echo "All containers are healthy."
              exit 0
            fi
            echo "Waiting for healthy containers..."
            sleep $INTERVAL
          done
          echo "Timeout waiting for healthy containers!"
          docker ps
          exit 1

      - name: Run tests and generate report
        run: |
          docker exec test-runner pytest tests/integration --maxfail=1 --disable-warnings -q --html=integration-test-report.html --import-mode=importlib

      - name: Copy report from container
        run: docker cp test-runner:/app/integration-test-report.html integration-test-report.html

      - name: Upload integration test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-report
          path: integration-test-report.html

      - name: Show logs on failure
        if: failure()
        run: |
          echo "==== docker ps ===="
          docker ps
          echo "==== logs: postgres ===="
          docker logs ecommerce-postgres || true
          echo "==== logs: kafka1 ===="
          docker logs ecommerce-kafka1 || true
          echo "==== logs: kafka2 ===="
          docker logs ecommerce-kafka2 || true
          echo "==== logs: kafka3 ===="
          docker logs ecommerce-kafka3 || true
          echo "==== logs: producer ===="
          docker logs ecommerce-producer || true
          echo "==== logs: kafka-ui ===="
          docker logs ecommerce-kafka-ui || true
          echo "==== logs: test-runner ===="
          docker logs test-runner || true

      - name: Tear down
        if: always()
        run: |
          docker-compose -f docker-compose.yaml -f docker-compose.ci.yaml down -v

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install security tools
        run: pip install bandit safety

      - name: Run Bandit security linter
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Fail only on MEDIUM/HIGH severity findings
        run: |
          python3 <<EOF
          import json, sys
          with open('bandit-report.json') as f:
              data = json.load(f)
          severities = [r['issue_severity'] for r in data.get('results', [])]
          if any(s in ['MEDIUM', 'HIGH'] for s in severities):
              print('Bandit found MEDIUM/HIGH severity issues!')
              sys.exit(1)
          print('Only LOW severity findings, job continues.')
          EOF

      - name: Run Safety check
        run: safety check --output json > safety-report.json

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build and push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            my-image:latest
            my-image:${{ github.sha }}
